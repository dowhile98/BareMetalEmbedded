/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*Inacludes -----------------------------------------------------------------*/

#include "stm32f4xx.h"

#define BIT_WORD_ADDRES_SRAM(addr, bit)  (SRAM1_BB_BASE + (addr - SRAM_BASE) * 32 + bit * 4)

#define BIT_WORD_ADDRES_PP(addr, bit)  (PERIPH_BB_BASE + (addr - PERIPH_BASE) * 32 + bit * 4)

#define GPIOA_PA5_ODR		*((volatile uint8_t *)BIT_WORD_ADDRES_PP(0x40020014, 5))




typedef struct{
	volatile uint32_t bit0;
	volatile uint32_t bit1;
	volatile uint32_t bit2;
	volatile uint32_t bit3;
	volatile uint32_t bit4;
	volatile uint32_t bit5;
	volatile uint32_t bit6;
	volatile uint32_t bit7;
	volatile uint32_t bit8;
	volatile uint32_t bit9;
	volatile uint32_t bit10;
	volatile uint32_t bit11;
	volatile uint32_t bit12;
	volatile uint32_t bit13;
	volatile uint32_t bit14;
	volatile uint32_t bit15;
}BitBanding_t;

#define GPIOA_ODR ((BitBanding_t *)(BIT_WORD_ADDRES_PP(0x40020014, 0)))

void GPIO_pinWrite(GPIO_TypeDef *GPIOx, uint8_t pin, uint8_t state){

	if(state != 0){
		GPIOx->BSRR |= 	1<<pin;
	}else{
		GPIOx->BSRR |= 1<<(16 + pin);
	}

}

#define PA5   A, 5
#define PA10  A, 10

#define PIN_SET_(a, b, c)		{GPIO ## a ->BSRR |= (c!= 0) ? 1<<b : 1<<(b + 16);}
#define PIN_SET(a, b)			PIN_SET_(a, b)


int main(void)
{
	/*
	*((volatile uint32_t *)(0x20000300)) |= 1<<2;

	*((volatile uint8_t *)(0x22006008)) = 0;
	*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	//PA5
	GPIOA->MODER &=~ GPIO_MODER_MODE5;
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
	//PA10
	GPIOA->MODER &=~ GPIO_MODER_MODE10;
	GPIOA->MODER |= GPIO_MODER_MODE10_0;
	/*
	GPIOA_PA5_ODR = 1;

	GPIOA_PA5_ODR = 0;*/
	GPIOA_ODR->bit5 = 1;
	GPIOA_ODR->bit10 = 1;

	GPIOA_ODR->bit5 = 0;

	GPIO_pinWrite(GPIOA, 5, 1);

	PIN_SET(PA5, 1);

    /* Loop forever */
	for(;;);
}
